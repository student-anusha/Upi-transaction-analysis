# -*- coding: utf-8 -*-
"""upi trancation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xT4sU68R7alfUKLYO5ExHA_2dvclHByE
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# dataset
file_path = '/content/transactions.csv'
df = pd.read_csv(file_path)

# Display the first 5 rows to inspect the dataset
df.head()

df=pd.read_csv('/content/transactions.csv')

#checking the messing values
df.isnull().sum()

print(df.info())
print(df.duplicated().sum())
print(df.describe())

# handaing= missing data
df.dropna(inplace=True)
df['Amount (INR)'].fillna(df['Amount (INR)'].mean(), inplace=True)
df['Status'].fillna('UNKOWN', inplace=True)



#covert data type
df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df['Amount (INR)'] = pd.to_numeric(df['Amount (INR)'], errors='coerce')

# Getting useful features
df['Day'] = df['Timestamp'].dt.day #This line was causing the issue
df['Hour'] = df['Timestamp'].dt.hour

#bank namw from upi ids
df['Sender_Bank'] = df['Sender UPI ID'].str.split('@').str[-1]
df['Receiver_Bank'] = df['Receiver UPI ID'].str.split('@').str[-1]

# in inconsistent data handaling
df['Status']=df['Status'].str.upper()
df['Status'].fillna('UNKOWN', inplace=True)
df['Status']=df['Status'].replace({'FAIL': 'FAILED', 'SUCCEED': 'SUCCESS'})

# handaling outliner
import seaborn as sns
sns.boxplot(df['Amount (INR)']) # Corrected the sns call
plt.show()
#removing the  row where the amount is abovve 99th perentile
df=df[df['Amount (INR)']< df['Amount (INR)'].quantile(0.99)] # Corrected to quantile


# validating data
print(df.isnull().sum())
print(df.info())
print(df.duplicated().sum())
print(df.describe())
print(df.head())

#covert data type
df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df['Amount (INR)'] = pd.to_numeric(df['Amount (INR)'], errors='coerce')

# Getting useful features
df['Day'] = df['Timestamp'].dt.day #This line was causing the issue
df['Hour'] = df['Timestamp'].dt.hour

#bank namw from upi ids
df['Sender_Bank'] = df['Sender UPI ID'].str.split('@').str[-1]
df['Receiver_Bank'] = df['Receiver UPI ID'].str.split('@').str[-1]

# in inconsistent data handaling
df['Status']=df['Status'].str.upper()
df['Status'].fillna('UNKOWN', inplace=True)
df['Status']=df['Status'].replace({'FAIL': 'FAILED', 'SUCCEED': 'SUCCESS'})

# handaling outliner
import seaborn as sns
sns.boxplot(df['Amount (INR)']) # Corrected the sns call
plt.show()
#removing the  row where the amount is abovve 99th perentile
df=df[df['Amount (INR)']< df['Amount (INR)'].quantile(0.99)] # Corrected to quantile


# validating data
print(df.isnull().sum())
print(df.info())
print(df.duplicated().sum())
print(df.describe())
print(df.head())

df.to_csv('cleaned_transactions.csv', index=False)

# Analytical questions comprehension
# PeaKtransaction are throughout the day

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('cleaned_transactions.csv')

# Extract hour from Timestamp
df['Hour'] = pd.to_datetime(df['Timestamp']).dt.hour

# Group by hour and count transactions
hourly_transactions = df.groupby('Hour').size().reset_index(name='Transaction_Count')

plt.figure(figsize=(10, 6))
sns.barplot(x='Hour', y='Transaction_Count', data=hourly_transactions, palette='viridis')
plt.title('Peak Transaction')
plt.xlabel('Hour of the Day')
plt.ylabel('No. of Transactions')
plt.show()

#Month-end tranction trend

# Extract month and day from Timestamp
df['Month'] = pd.to_datetime(df['Timestamp']).dt.month
df['Day'] = pd.to_datetime(df['Timestamp']).dt.day

# Analyze month-end tranction  (e.g., last 5 days of the month)
month_end_days = range(25, 32)  # Days 25-31
month_end_transactions = df[df['Day'].isin(month_end_days)]

# Group by day and count transactions
month_end_daily_transactions = month_end_transactions.groupby('Day').size().reset_index(name='Transaction_Count')

plt.figure(figsize=(10, 6))
sns.lineplot(x='Day', y='Transaction_Count', data=month_end_daily_transactions, marker='o')
plt.title('Transaction During Month-End ')
plt.xlabel('Day of the Month')
plt.ylabel('No. of Transactions')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Define time ranges
afternoon = range(12, 14)  # 12 PM–2 PM
latenight = list(range(22, 24)) + list(range(0, 2))  # 10 PM–2 AM

# Filter transactions for noon and late night
noon_transactions = df[df['Hour'].isin(afternoon)]
late_night_transactions = df[df['Hour'].isin(latenight)]

# Group by hour and count transactions
noon_hourly_transactions = noon_transactions.groupby('Hour').size().reset_index(name='Transaction_Count')
late_night_hourly_transactions = late_night_transactions.groupby('Hour').size().reset_index(name='Transaction_Count')

# Plot noon transactions
plt.figure(figsize=(10, 6))
sns.barplot(x='Hour', y='Transaction_Count', data=noon_hourly_transactions, palette='coolwarm')
plt.title('Transactions During Afternoon (12 PM–2 PM)')
plt.xlabel('Hour of the Day')
plt.ylabel('No. of Transactions')
plt.show()

# Plot late-night transactions
plt.figure(figsize=(10, 6))
sns.barplot(x='Hour', y='Transaction_Count', data=late_night_hourly_transactions, palette='coolwarm')
plt.title('Transactions During Late Nights (10 PM–2 AM)')
plt.xlabel('Hour of the Day')
plt.ylabel('No. of Transactions')
plt.show()

#failure Rate of trnsaction

import pandas as pd

# Load the dataset
df = pd.read_csv('transactions.csv')

# Total number of transactions
total_transactions = df.shape[0]

# Number of failed transactions
failed_transactions = df[df['Status'] == 'FAILED'].shape[0]

# Percentage of failed transactions
failure_percentage = (failed_transactions / total_transactions) * 100

print(f"Percentage of failed transactions: {failure_percentage:.2f}%")

import seaborn as sns
import matplotlib.pyplot as plt

successful = total_transactions - failed_transactions
failure_data = pd.DataFrame({
    'Status': ['Successful', 'Failed'],
    'Count': [successful, failed_transactions]
})
# Plot Bar Chart
plt.figure(figsize=(7, 5))
sns.barplot(x='Status', y='Count', data=failure_data, palette=['green', 'red'])
plt.title("Failure Rate of Transactions")
plt.ylabel("Number of Transactions")
plt.show()

# Which bank has the most failur rate

# Load the cleaned dataset where Sender_Bank exists.
df = pd.read_csv('cleaned_transactions.csv')

failure_rate = df.groupby('Sender_Bank')['Status'].apply(
    lambda x: (x == 'FAILED').mean() * 100   # converts it to a percentage.
).reset_index(name='Failure_Rate')

#  failure rate in desc order
failure_rate = failure_rate.sort_values('Failure_Rate', ascending=False)

# show  bank with highest failure rate
highest_failure_bank = failure_rate.iloc[0]   #selects the first row
print(f"Bank with the highest failure rate: {highest_failure_bank['Sender_Bank']} ({highest_failure_bank['Failure_Rate']:.2f}%)")

# Visualize top 10 banks by failure rate
plt.figure(figsize=(10, 6))
sns.barplot(x='Failure_Rate', y='Sender_Bank', data=failure_rate.head(10), palette='Reds')
plt.title('Top 10 Banks by Failure Rate')
plt.xlabel('Failure Rate (%)')
plt.ylabel('Bank')
plt.show()

"""# New Section"""

# frequently used bank UPI
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('cleaned_transactions.csv')

#Count transactions by Sender's bank
sender = df['Sender_Bank'].value_counts().reset_index(name='Transaction_Count')
sender.rename(columns={'index': 'Sender_Bank'}, inplace=True)

# Count transactions by Receiver's bank
receiver = df['Receiver_Bank'].value_counts().reset_index(name='Transaction_Count')
receiver.rename(columns={'index': 'Receiver_Bank'}, inplace=True)

# Combine sender and receiver counts
bank_counts = sender.merge(receiver, left_on='Sender_Bank', right_on='Receiver_Bank', how='outer')
bank_counts['Total_Transactions'] = bank_counts['Transaction_Count_x'].fillna(0) + bank_counts['Transaction_Count_y'].fillna(0)

# Identify the bank with the highest transaction volume
most_frequent_bank = bank_counts.loc[bank_counts['Total_Transactions'].idxmax()]
print(f"Most frequently used bank: {most_frequent_bank['Sender_Bank']} ({most_frequent_bank['Total_Transactions']} transactions)")

# Visualize top 10 banks by transaction volume
plt.figure(figsize=(10, 6))
sns.barplot(x='Total_Transactions', y='Sender_Bank', data=bank_counts.sort_values('Total_Transactions', ascending=False).head(10), palette='Greens')
plt.title('Top 10 Banks by Transaction Volume')
plt.xlabel('Total Transactions')
plt.ylabel('Bank')
plt.show()

#  Bank which has the highest success rate
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('cleaned_transactions.csv')

# Group by Sender_Bank and calculate success rate
bank_success_rate = df.groupby('Sender_Bank')['Status'].apply(
    lambda x: (x == 'SUCCESS').mean() * 100
).reset_index(name='Success_Rate')

# Sort by success rate in descending order
bank_success_rate = bank_success_rate.sort_values('Success_Rate', ascending=False)

# Display the bank with the highest success rate
highest_success_bank = bank_success_rate.iloc[0]
print(f"Bank with the highest success rate: {highest_success_bank['Sender_Bank']} ({highest_success_bank['Success_Rate']:.2f}%)")

# Visualize top 10 banks by success rate
plt.figure(figsize=(10, 6))
sns.barplot(x='Success_Rate', y='Sender_Bank', data=bank_success_rate.head(10), palette='Blues')
plt.title('Top 10 Banks by Success Rate')
plt.xlabel('Success Rate (%)')
plt.ylabel('Bank')
plt.show()







import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('transactions.csv')
print(df.columns)

#  'Timestamp' to datetime
df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
df['Date'] = df['Timestamp'].dt.date

# Check if 'Amount (INR)' exists
if 'Amount (INR)' not in df.columns:
    print("Error: 'Amount (INR)' column not found!")
else:
    # Filter transactions above ₹5,000
    high_value_transactions = df[df['Amount (INR)'] > 50000]

    # Check if filtering returned data
    if high_value_transactions.empty:
        print("No transactions above ₹5,000 found.")
    else:
        # Group by 'Date' and count transactions
        daily_high_value_transactions = high_value_transactions.groupby('Date').size().reset_index(name='Transaction Count')

        plt.figure(figsize=(10, 6))
        plt.bar(daily_high_value_transactions['Date'], daily_high_value_transactions['Transaction Count'], color='skyblue')
        plt.xlabel('Date')
        plt.ylabel('Number of Transactions > ₹5,000')
        plt.title('Daily High-Value Transactions (> ₹5,000)')
        plt.xticks(rotation=45)
        plt.show()

daily_high_value_transactions.to_csv('daily_high_value_transactions.csv', index=False)



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


df = pd.read_csv('cleaned_transactions.csv')

# Remove any extra spaces in column names
df.columns = df.columns.str.strip()

##Common Transaction Amount (₹100 - ₹5000)
filtered_df = df[(df['Amount (INR)'] >= 100) & (df['Amount (INR)'] <= 5000)]
most_common_amount = filtered_df['Amount (INR)'].mode()[0]  # Most frequent transaction amount

# Count occurrences
amount_counts = filtered_df['Amount (INR)'].value_counts().reset_index()
amount_counts.columns = ['Amount (INR)', 'Count']

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(x='Amount (INR)', y='Count', data=amount_counts.head(10), palette='Blues')
plt.xlabel("Transaction Amount (INR)")
plt.ylabel("Frequency")
plt.title("Most Common Transaction Amounts (₹100-₹5000)")
plt.xticks(rotation=45)
plt.show()

print(f"Most common transaction amount (₹100-₹5000): ₹{most_common_amount}")

###Minimum & Maximum Transaction by UPI ID
upi_transaction_summary = df.groupby('Sender UPI ID')['Amount (INR)'].agg(['min', 'max']).reset_index()
print("\nMinimum & Maximum Amount Transferred by Each UPI ID:")
print(upi_transaction_summary.head(10))  # Show top 10 for preview



#trabnation failur prediction
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report


df = pd.read_csv('cleaned_transactions.csv')

df['Hour'] = pd.to_datetime(df['Timestamp']).dt.hour


# Define features for your model
features = ['Amount (INR)', 'Hour', 'Sender_Bank', 'Status']  # Updated features
# Create dummy variables for categorical features
X = pd.get_dummies(df[features], columns=['Sender_Bank', 'Status'])
# Assuming 'Status' is your target variable
y = df['Status'].apply(lambda x: 1 if x == 'FAILED' else 0)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Model Training
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Prediction & Evaluation
y_pred = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(classification_report(y_test, y_pred))